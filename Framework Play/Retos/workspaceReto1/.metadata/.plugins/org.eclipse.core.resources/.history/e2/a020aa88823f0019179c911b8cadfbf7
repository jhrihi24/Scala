package services

import javax.inject._
import scala.concurrent.Future
import play.api._

trait Calculos {
  def realizarOperacion(numeros: Seq[Double], operacion: String): Future[Double]
}

@Singleton
class AtomicCalculos extends Calculos{  
  def realizarOperacion(numeros: Seq[Double], operacion: String): Future[Double] = {
    val resultado= operacion match {
      case "suma" =>  numeros.sum
      case "multiplicacion" => numeros.product
      case "division" => division(numeros)
      case "exponente" => exponente(numeros)
      case "seno" => seno(numeros)
      case "coseno" => coseno(numeros)
      case "radicacion" => radicacion(numeros)
      case _ => Exception => Future.successful( InternalServerError("No pudo guardarse el registro") )
    }
    
    Future.successful(resultado)
  }
  
  private def division(numeros: Seq[Double]): Double = {
    if(numeros.size==2) numeros.indexOf(0) / numeros.indexOf(1) else 0.0
  }
  
  private def exponente(numeros: Seq[Double]): Double = {
    if(numeros.size==2) math.pow(numeros.indexOf(0), numeros.indexOf(1)) else 0.0
  }
  
  private def radicacion(numeros: Seq[Double]): Double = {
    if(numeros.size==1) math.sqrt(numeros.indexOf(0)) else 0.0
  }
  
  private def coseno(numeros: Seq[Double]): Double = {
    if(numeros.size==1) math.cos(numeros.indexOf(0)) else 0.0
  }
  
  private def seno(numeros: Seq[Double]): Double = {
    if(numeros.size==1) math.sin(numeros.indexOf(0)) else 0.0
  }    
}