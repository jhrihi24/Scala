package controllers

import org.scalatest._
import org.scalatestplus.play._

import play.api.test._
import play.api.test.Helpers.{ GET => GET_REQUEST, _ }

import scala.concurrent.Future
import scala.concurrent.ExecutionContext

import play.api.libs.json._
import play.api.libs.functional.syntax._

import play.api.mvc._
import play.api.test._
import play.api.test.Helpers._
import play.api.inject.guice.GuiceInjectorBuilder
import play.api.inject.bind

import play.api.inject.guice.GuiceApplicationBuilder

import services.CalculosService
import models.Numeros
import org.scalatestplus.play.guice.GuiceOneAppPerSuite

class CalculadoraControllerSpec extends PlaySpec with Results with GuiceOneAppPerSuite  {
  
    val controllerComponents = Helpers.stubControllerComponents()
    val calculos= app.injector.instanceOf[Calculos]
    val controller = new CalculadoraController(controllerComponents, calculos)(controllerComponents.executionContext)
  
    "Calculadora Page#calcular" should {
      "deberia realizar una suma" in {      
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(2, 3, 4), "suma"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "El resultado de la operacion suma es 9.0"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia realizar una multiplicacion" in {      
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(2, 3, 4), "multiplicacion"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "El resultado de la operacion multiplicacion es 24.0"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia realizar una division" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4, 2), "division"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "El resultado de la operacion division es 2.0"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia sacar un mensaje de error por longitud de valores en division" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4, 2, 5), "division"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "Error: La longitud de valores no es la correcta"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia realizar una exponenciacion" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4, 2), "exponente"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "El resultado de la operacion exponente es 16.0"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia sacar un mensaje de error por longitud de valores en exponenciacion" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4, 2, 5), "exponente"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "Error: La longitud de valores no es la correcta"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia realizar un sen" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4), "seno"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "El resultado de la operacion seno es -0.76"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia sacar un mensaje de error por longitud de valores en sen" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4, 2, 5), "seno"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "Error: La longitud de valores no es la correcta"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia realizar un cos" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4), "coseno"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "El resultado de la operacion coseno es -0.65"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia sacar un mensaje de error por longitud de valores en cos" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4, 2, 5), "coseno"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "Error: La longitud de valores no es la correcta"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia realizar una radicacion" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4), "radicacion"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "El resultado de la operacion radicacion es 2.0"
      }
    }
    
    "Calculadora Page#calcular" should {
      "deberia sacar un mensaje de error por longitud de valores en radicacion" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4, 2, 5), "radicacion"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "Error: La longitud de valores no es la correcta"
      }
    }
    
     "Calculadora Page#calcular" should {
      "deberia sacar un mensaje de error que la operacion no existe" in {
        val fakeRequest = FakeRequest(POST, "/json").withBody(new Numeros(Seq(4), "euler"))
        val result: Future[Result] = controller.calcular().apply(fakeRequest)
        val bodyText: String = contentAsString(result)
        bodyText mustBe "Error: Esa operacion no existe"
      }
    }    
  
}