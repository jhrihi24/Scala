package controllers

import javax.inject._

import play.api._
import play.api.libs.json._
import play.api.libs.functional.syntax._
import play.api.mvc._

import scala.concurrent.{ExecutionContext, Future}

import services.PersonaCommandService
import models.Persona
import dto.Respuesta

@Singleton
class PersonaCommandController @Inject()(cc: ControllerComponents, personaService: PersonaCommandService)(implicit executionContext: ExecutionContext) extends AbstractController(cc){
    
  def insertarPersona() = Action.async(parse.json[Persona]) { request =>
    val persona= request.body
    personaService.insertarPersona(persona)
      .map(_ => Ok("Persona insertada correctamente"))
      .recoverWith {
        case _: Exception => Future.successful( InternalServerError("No pudo guardarse el registro") )
      }
  }
  
  def modificarPersona() = Action.async(parse.json[Persona]) { request =>
    val persona= request.body
    personaService.modificarPersona(persona)
    .map(_ => Ok("Persona modificada correctamente"))
    .recoverWith {
        case _: Exception => Future.successful( InternalServerError("No pudo modificarse el registro") )
    }
  }
    
   def eliminarPersona(idPersona: Int) = Action.async { request =>
    personaService.eliminarPersona(idPersona)
      .map(_ => Ok("Persona eliminada correctamente"))
      .recoverWith {
        case _: Exception => Future.successful( InternalServerError("No pudo eliminarse el registro") )
      }
  }
  
}