package controllers

import play.api.mvc._
import javax.inject.Inject
import play.api.libs.json._
import play.api.libs.functional.syntax._

import scala.concurrent.Future
import scala.concurrent.ExecutionContext
import scala.concurrent.TimeoutException

@Singleton
class CarroController @Inject()(cc:ControllerComponents) (implicit ec: ExecutionContext) extends AbstractController(cc){
  
  def listPlacesFuture = Action.async{
    devolverListFuture().map {pi => 
       Ok(Json.toJson(pi)) 
    }.recover {
      case e: TimeoutException =>
        InternalServerError("Calculation timed out!")
    }
  }
  
  
  def validateJson[A : Reads] = parse.json.validate(
    _.validate[A].asEither.left.map(e => BadRequest(JsError.toJson(e)))
  )
  
  def savePlace = Action(validateJson[Place]) { request =>
    val place = request.body
    save(place)
    Ok(Json.obj("status" ->"OK", "message" -> ("Place '"+place.name+"' guardado correctamente.") ))
  }
  
}

case class Carro(placa: String, color: String, modelo: Int)
object Carro {
  
  //Escribir el objeto Location como JSON
  implicit val locationWrites: Writes[Location] = (
    (JsPath \ "lat").write[Double] and
    (JsPath \ "long").write[Double]
  )(unlift(Location.unapply))
  
  //Escribir el objeto Place como JSON
  implicit val placeWrites: Writes[Place] = (
    (JsPath \ "name").write[String] and
    (JsPath \ "location").write[Location]
  )(unlift(Place.unapply))
  
  //Leer el objeto Location como JSON
  implicit val locationReads: Reads[Location] = (
    (JsPath \ "lat").read[Double] and
    (JsPath \ "long").read[Double]
  )(Location.apply _)
  
  //Leer el objeto Place como JSON
  implicit val placeReads: Reads[Place] = (
    (JsPath \ "name").read[String] and
    (JsPath \ "location").read[Location]
  )(Place.apply _)
  
  
  var list: List[Place] = {
    List(
      Place(
        "Sandleford",
        Location(51.377797, -1.318965)
      ),
      Place(
        "Watership Down",
        Location(51.235685, -1.309197)
      )
    )
  }
  
  def devolverListFuture(): Future[List[Place]] = {
    Future.successful(list)
  }

  def save(place: Place) = {
    list = list ::: List(place)
  }
} 